// Code generated by MockGen. DO NOT EDIT.
// Source: ./reportsRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/BrunoDM2943/church-members-api/internal/constants/model"
	gomock "github.com/golang/mock/gomock"
)

// MockReportRepository is a mock of ReportRepository interface.
type MockReportRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReportRepositoryMockRecorder
}

// MockReportRepositoryMockRecorder is the mock recorder for MockReportRepository.
type MockReportRepositoryMockRecorder struct {
	mock *MockReportRepository
}

// NewMockReportRepository creates a new mock instance.
func NewMockReportRepository(ctrl *gomock.Controller) *MockReportRepository {
	mock := &MockReportRepository{ctrl: ctrl}
	mock.recorder = &MockReportRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportRepository) EXPECT() *MockReportRepositoryMockRecorder {
	return m.recorder
}

// FindMembersActive mocks base method.
func (m *MockReportRepository) FindMembersActive() ([]*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembersActive")
	ret0, _ := ret[0].([]*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembersActive indicates an expected call of FindMembersActive.
func (mr *MockReportRepositoryMockRecorder) FindMembersActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembersActive", reflect.TypeOf((*MockReportRepository)(nil).FindMembersActive))
}

// FindMembersActiveAndMarried mocks base method.
func (m *MockReportRepository) FindMembersActiveAndMarried() ([]*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembersActiveAndMarried")
	ret0, _ := ret[0].([]*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembersActiveAndMarried indicates an expected call of FindMembersActiveAndMarried.
func (mr *MockReportRepositoryMockRecorder) FindMembersActiveAndMarried() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembersActiveAndMarried", reflect.TypeOf((*MockReportRepository)(nil).FindMembersActiveAndMarried))
}
