// Code generated by MockGen. DO NOT EDIT.
// Source: ./memberRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	model "github.com/BrunoDM2943/church-members-api/internal/constants/model"
	mongo "github.com/BrunoDM2943/church-members-api/internal/storage/mongo"
	gomock "github.com/golang/mock/gomock"
)

// MockIMemberRepository is a mock of IMemberRepository interface.
type MockIMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMemberRepositoryMockRecorder
}

// MockIMemberRepositoryMockRecorder is the mock recorder for MockIMemberRepository.
type MockIMemberRepositoryMockRecorder struct {
	mock *MockIMemberRepository
}

// NewMockIMemberRepository creates a new mock instance.
func NewMockIMemberRepository(ctrl *gomock.Controller) *MockIMemberRepository {
	mock := &MockIMemberRepository{ctrl: ctrl}
	mock.recorder = &MockIMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemberRepository) EXPECT() *MockIMemberRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIMemberRepository) FindAll(filters mongo.QueryFilters) ([]*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", filters)
	ret0, _ := ret[0].([]*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIMemberRepositoryMockRecorder) FindAll(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIMemberRepository)(nil).FindAll), filters)
}

// FindByID mocks base method.
func (m *MockIMemberRepository) FindByID(id model.ID) (*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIMemberRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIMemberRepository)(nil).FindByID), id)
}

// FindMonthBirthday mocks base method.
func (m *MockIMemberRepository) FindMonthBirthday(date time.Time) ([]*model.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthBirthday", date)
	ret0, _ := ret[0].([]*model.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthBirthday indicates an expected call of FindMonthBirthday.
func (mr *MockIMemberRepositoryMockRecorder) FindMonthBirthday(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthBirthday", reflect.TypeOf((*MockIMemberRepository)(nil).FindMonthBirthday), date)
}

// GenerateStatusHistory mocks base method.
func (m *MockIMemberRepository) GenerateStatusHistory(id model.ID, status bool, reason string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateStatusHistory", id, status, reason, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateStatusHistory indicates an expected call of GenerateStatusHistory.
func (mr *MockIMemberRepositoryMockRecorder) GenerateStatusHistory(id, status, reason, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateStatusHistory", reflect.TypeOf((*MockIMemberRepository)(nil).GenerateStatusHistory), id, status, reason, date)
}

// Insert mocks base method.
func (m *MockIMemberRepository) Insert(member *model.Member) (model.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", member)
	ret0, _ := ret[0].(model.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIMemberRepositoryMockRecorder) Insert(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIMemberRepository)(nil).Insert), member)
}

// Search mocks base method.
func (m *MockIMemberRepository) Search(text string) ([]*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", text)
	ret0, _ := ret[0].([]*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockIMemberRepositoryMockRecorder) Search(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIMemberRepository)(nil).Search), text)
}

// UpdateStatus mocks base method.
func (m *MockIMemberRepository) UpdateStatus(ID model.ID, status bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIMemberRepositoryMockRecorder) UpdateStatus(ID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIMemberRepository)(nil).UpdateStatus), ID, status)
}
