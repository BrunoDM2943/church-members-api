// Code generated by MockGen. DO NOT EDIT.
// Source: ./memberService.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "github.com/BrunoDM2943/church-members-api/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockIMemberService is a mock of IMemberService interface
type MockIMemberService struct {
	ctrl     *gomock.Controller
	recorder *MockIMemberServiceMockRecorder
}

// MockIMemberServiceMockRecorder is the mock recorder for MockIMemberService
type MockIMemberServiceMockRecorder struct {
	mock *MockIMemberService
}

// NewMockIMemberService creates a new mock instance
func NewMockIMemberService(ctrl *gomock.Controller) *MockIMemberService {
	mock := &MockIMemberService{ctrl: ctrl}
	mock.recorder = &MockIMemberServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMemberService) EXPECT() *MockIMemberServiceMockRecorder {
	return m.recorder
}

// FindMembers mocks base method
func (m *MockIMemberService) FindMembers(filters map[string]interface{}) ([]*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembers", filters)
	ret0, _ := ret[0].([]*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembers indicates an expected call of FindMembers
func (mr *MockIMemberServiceMockRecorder) FindMembers(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembers", reflect.TypeOf((*MockIMemberService)(nil).FindMembers), filters)
}

// FindMembersByID mocks base method
func (m *MockIMemberService) FindMembersByID(id entity.ID) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembersByID", id)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembersByID indicates an expected call of FindMembersByID
func (mr *MockIMemberServiceMockRecorder) FindMembersByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembersByID", reflect.TypeOf((*MockIMemberService)(nil).FindMembersByID), id)
}

// SaveMember mocks base method
func (m *MockIMemberService) SaveMember(member *entity.Member) (entity.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMember", member)
	ret0, _ := ret[0].(entity.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMember indicates an expected call of SaveMember
func (mr *MockIMemberServiceMockRecorder) SaveMember(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMember", reflect.TypeOf((*MockIMemberService)(nil).SaveMember), member)
}

// FindMonthBirthday mocks base method
func (m *MockIMemberService) FindMonthBirthday(date time.Time) ([]*entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthBirthday", date)
	ret0, _ := ret[0].([]*entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthBirthday indicates an expected call of FindMonthBirthday
func (mr *MockIMemberServiceMockRecorder) FindMonthBirthday(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthBirthday", reflect.TypeOf((*MockIMemberService)(nil).FindMonthBirthday), date)
}

// ChangeStatus mocks base method
func (m *MockIMemberService) ChangeStatus(id entity.ID, status bool, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", id, status, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus
func (mr *MockIMemberServiceMockRecorder) ChangeStatus(id, status, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockIMemberService)(nil).ChangeStatus), id, status, reason)
}
