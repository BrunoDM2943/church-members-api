// Code generated by MockGen. DO NOT EDIT.
// Source: memberRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "github.com/BrunoDM2943/church-members-api/entity"
	mongo "github.com/BrunoDM2943/church-members-api/infra/mongo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMemberRepository is a mock of IMemberRepository interface
type MockIMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMemberRepositoryMockRecorder
}

// MockIMemberRepositoryMockRecorder is the mock recorder for MockIMemberRepository
type MockIMemberRepositoryMockRecorder struct {
	mock *MockIMemberRepository
}

// NewMockIMemberRepository creates a new mock instance
func NewMockIMemberRepository(ctrl *gomock.Controller) *MockIMemberRepository {
	mock := &MockIMemberRepository{ctrl: ctrl}
	mock.recorder = &MockIMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMemberRepository) EXPECT() *MockIMemberRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockIMemberRepository) FindAll(filters mongo.QueryFilters) ([]*entity.Membro, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", filters)
	ret0, _ := ret[0].([]*entity.Membro)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockIMemberRepositoryMockRecorder) FindAll(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIMemberRepository)(nil).FindAll), filters)
}

// FindByID mocks base method
func (m *MockIMemberRepository) FindByID(id entity.ID) (*entity.Membro, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Membro)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockIMemberRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIMemberRepository)(nil).FindByID), id)
}

// Insert mocks base method
func (m *MockIMemberRepository) Insert(membro *entity.Membro) (entity.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", membro)
	ret0, _ := ret[0].(entity.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockIMemberRepositoryMockRecorder) Insert(membro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIMemberRepository)(nil).Insert), membro)
}

// Search mocks base method
func (m *MockIMemberRepository) Search(text string) ([]*entity.Membro, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", text)
	ret0, _ := ret[0].([]*entity.Membro)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockIMemberRepositoryMockRecorder) Search(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIMemberRepository)(nil).Search), text)
}
